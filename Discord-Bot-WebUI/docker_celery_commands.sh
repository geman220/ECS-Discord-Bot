#!/bin/bash

# Docker/Production Celery Diagnostic and Management Commands
# Usage: Run these commands on your production server

echo "========================================"
echo "DOCKER CELERY DIAGNOSTIC COMMANDS"
echo "========================================"
echo ""

# Container names (based on your docker ps output)
WEBUI_CONTAINER="ecs-discord-bot-webui-1"
CELERY_WORKER_CONTAINER="ecs-discord-bot-celery-worker-1"
CELERY_BEAT_CONTAINER="ecs-discord-bot-celery-beat-1"
CELERY_LIVE_REPORTING_CONTAINER="ecs-discord-bot-celery-live-reporting-worker-1"
REDIS_CONTAINER="ecs-discord-bot-redis-1"

echo "üìã STEP 1: CHECK CONTAINER STATUS"
echo "================================="
echo "docker ps | grep -E '(celery|redis|discord)'"
echo ""

echo "üîç STEP 2: QUICK DIAGNOSIS"
echo "=========================="
echo "# Run comprehensive diagnostic script"
echo "docker exec -it $WEBUI_CONTAINER python diagnose_celery_tasks.py"
echo ""

echo "üìä STEP 3: DETAILED QUEUE INSPECTION"
echo "===================================="
echo ""
echo "3a. CHECK CELERY WORKER STATUS:"
echo "-------------------------------"
echo "docker exec -it $CELERY_WORKER_CONTAINER celery -A app.celery inspect active"
echo ""

echo "3b. CHECK RESERVED (PENDING) TASKS:"
echo "-----------------------------------"
echo "docker exec -it $CELERY_WORKER_CONTAINER celery -A app.celery inspect reserved"
echo ""

echo "3c. CHECK SCHEDULED TASKS:"
echo "--------------------------"
echo "docker exec -it $CELERY_WORKER_CONTAINER celery -A app.celery inspect scheduled"
echo ""

echo "3d. CHECK WORKER STATS:"
echo "-----------------------"
echo "docker exec -it $CELERY_WORKER_CONTAINER celery -A app.celery inspect stats"
echo ""

echo "3e. CHECK QUEUE LENGTH IN REDIS:"
echo "--------------------------------"
echo "docker exec -it $REDIS_CONTAINER redis-cli -n 0 LLEN celery"
echo "docker exec -it $REDIS_CONTAINER redis-cli -n 0 LLEN live_reporting"
echo ""

echo "üßπ STEP 4: CLEAR STUCK TASKS"
echo "============================"
echo ""
echo "4a. CLEAR STUCK MATCH TASKS ONLY:"
echo "---------------------------------"
echo "docker exec -it $WEBUI_CONTAINER python clear_stuck_tasks.py"
echo ""

echo "4b. CLEAR RESERVED TASKS:"
echo "-------------------------"
echo "docker exec -it $WEBUI_CONTAINER python clear_stuck_tasks.py --clear-reserved"
echo ""

echo "4c. CLEAR FAILED TASKS:"
echo "-----------------------"
echo "docker exec -it $WEBUI_CONTAINER python clear_stuck_tasks.py --clear-failed"
echo ""

echo "4d. CLEAR REDIS LOCKS:"
echo "---------------------"
echo "docker exec -it $WEBUI_CONTAINER python clear_stuck_tasks.py --clear-locks"
echo ""

echo "4e. CLEAR CELERYBEAT SCHEDULE:"
echo "------------------------------"
echo "docker exec -it $WEBUI_CONTAINER python clear_stuck_tasks.py --restart-beat"
echo "# IMPORTANT: Run this after clearing beat schedule:"
echo "docker restart $CELERY_BEAT_CONTAINER"
echo ""

echo "‚ö° STEP 5: FORCE RUN MATCH THREAD"
echo "================================="
echo "# Replace MATCH_ID with actual ESPN match ID (not database ID)"
echo "docker exec -it $WEBUI_CONTAINER python clear_stuck_tasks.py --force-match-thread MATCH_ID"
echo ""

echo "üîÑ STEP 6: RESTART SERVICES"
echo "============================"
echo ""
echo "6a. RESTART CELERY WORKER:"
echo "--------------------------"
echo "docker restart $CELERY_WORKER_CONTAINER"
echo ""

echo "6b. RESTART CELERY BEAT:"
echo "------------------------"
echo "docker restart $CELERY_BEAT_CONTAINER"
echo ""

echo "6c. RESTART ALL CELERY SERVICES:"
echo "--------------------------------"
echo "docker restart $CELERY_WORKER_CONTAINER $CELERY_BEAT_CONTAINER"
echo ""

echo "üí• STEP 7: NUCLEAR OPTION (IF EVERYTHING IS STUCK)"
echo "=================================================="
echo "# ‚ö†Ô∏è WARNING: This will clear ALL tasks from ALL queues!"
echo "docker exec -it $WEBUI_CONTAINER python clear_stuck_tasks.py --purge-all --restart-beat --clear-locks --clear-failed"
echo "docker restart $CELERY_WORKER_CONTAINER $CELERY_BEAT_CONTAINER"
echo ""

echo "üìã STEP 8: VIEW LOGS"
echo "===================="
echo ""
echo "8a. VIEW CELERY WORKER LOGS:"
echo "----------------------------"
echo "docker logs --tail 100 -f $CELERY_WORKER_CONTAINER"
echo ""

echo "8b. VIEW CELERY BEAT LOGS:"
echo "--------------------------"
echo "docker logs --tail 100 -f $CELERY_BEAT_CONTAINER"
echo ""

echo "8c. SEARCH FOR MATCH THREAD ERRORS:"
echo "-----------------------------------"
echo "docker logs $CELERY_WORKER_CONTAINER 2>&1 | grep -i 'match.*thread\\|force_create_mls_thread'"
echo ""

echo "8d. VIEW RECENT ERROR LOGS:"
echo "---------------------------"
echo "docker logs --since=1h $CELERY_WORKER_CONTAINER 2>&1 | grep -i error"
echo ""

echo "üê≥ DOCKER-COMPOSE COMMANDS (IF USING COMPOSE)"
echo "=============================================="
echo ""
echo "# Check status of all services"
echo "docker-compose ps"
echo ""
echo "# View logs for all services"
echo "docker-compose logs -f --tail=100"
echo ""
echo "# View logs for specific services"
echo "docker-compose logs -f celery-worker celery-beat"
echo ""
echo "# Restart celery services only"
echo "docker-compose restart celery-worker celery-beat"
echo ""
echo "# Run diagnostic in web container"
echo "docker-compose exec webui python diagnose_celery_tasks.py"
echo ""
echo "# Force run match thread (replace MATCH_ID)"
echo "docker-compose exec webui python clear_stuck_tasks.py --force-match-thread MATCH_ID"
echo ""

echo "üîß REDIS DIRECT COMMANDS"
echo "========================"
echo ""
echo "# Check Redis connection"
echo "docker exec -it $REDIS_CONTAINER redis-cli ping"
echo ""
echo "# Check queue lengths"
echo "docker exec -it $REDIS_CONTAINER redis-cli info memory"
echo ""
echo "# Check for stuck task keys"
echo "docker exec -it $REDIS_CONTAINER redis-cli keys 'celery-task-meta-*' | wc -l"
echo ""
echo "# Clear specific queue (DANGEROUS)"
echo "docker exec -it $REDIS_CONTAINER redis-cli del celery"
echo ""

echo "üìã QUICK DIAGNOSIS WORKFLOW"
echo "==========================="
echo ""
echo "For immediate diagnosis, run these in order:"
echo "1Ô∏è‚É£  docker exec -it $WEBUI_CONTAINER python diagnose_celery_tasks.py"
echo "2Ô∏è‚É£  docker exec -it $CELERY_WORKER_CONTAINER celery -A app.celery inspect active"
echo "3Ô∏è‚É£  docker exec -it $CELERY_WORKER_CONTAINER celery -A app.celery inspect reserved"
echo "4Ô∏è‚É£  docker logs --tail 50 $CELERY_WORKER_CONTAINER"
echo ""

echo "üö® EMERGENCY FIX WORKFLOW"
echo "========================="
echo ""
echo "If match threads are not posting, run these in order:"
echo "1Ô∏è‚É£  docker exec -it $WEBUI_CONTAINER python clear_stuck_tasks.py"
echo "2Ô∏è‚É£  docker exec -it $WEBUI_CONTAINER python clear_stuck_tasks.py --clear-reserved --clear-locks"
echo "3Ô∏è‚É£  docker exec -it $WEBUI_CONTAINER python clear_stuck_tasks.py --restart-beat"
echo "4Ô∏è‚É£  docker restart $CELERY_BEAT_CONTAINER $CELERY_WORKER_CONTAINER"
echo "5Ô∏è‚É£  docker exec -it $WEBUI_CONTAINER python diagnose_celery_tasks.py"
echo ""

echo "üéØ FORCE RUN SPECIFIC MATCH"
echo "==========================="
echo ""
echo "If a specific match thread didn't post (scheduled for 8/29 5pm):"
echo "1Ô∏è‚É£  Find the ESPN match ID from /admin/match_management"
echo "2Ô∏è‚É£  docker exec -it $WEBUI_CONTAINER python clear_stuck_tasks.py --force-match-thread ESPN_MATCH_ID"
echo "3Ô∏è‚É£  Monitor logs: docker logs -f $CELERY_WORKER_CONTAINER"
echo ""

echo "üìã MONITORING & VERIFICATION"
echo "============================"
echo ""
echo "After fixes, verify everything is working:"
echo "‚úÖ Check queue is clear: docker exec -it $WEBUI_CONTAINER python diagnose_celery_tasks.py"
echo "‚úÖ Check workers responding: docker exec -it $CELERY_WORKER_CONTAINER celery -A app.celery inspect ping"
echo "‚úÖ Check beat is running: docker logs --tail 20 $CELERY_BEAT_CONTAINER"
echo "‚úÖ Check Discord threads posted: Look in Discord channel"
echo "‚úÖ Check admin panel: Visit /admin/match_management"
echo ""

echo "‚öôÔ∏è  CONTAINER NAME CUSTOMIZATION"
echo "================================"
echo ""
echo "If your container names are different, edit this script and change:"
echo "WEBUI_CONTAINER='your-webui-container-name'"
echo "CELERY_WORKER_CONTAINER='your-celery-worker-name'"
echo "CELERY_BEAT_CONTAINER='your-celery-beat-name'"
echo "REDIS_CONTAINER='your-redis-container-name'"
echo ""

echo "üìû TROUBLESHOOTING TIPS"
echo "======================="
echo ""
echo "üîç Common Issues:"
echo "  ‚Ä¢ Tasks stuck in PENDING state ‚Üí Clear with clear_stuck_tasks.py"
echo "  ‚Ä¢ No workers responding ‚Üí Restart celery-worker container"
echo "  ‚Ä¢ Beat not scheduling ‚Üí Clear beat schedule and restart beat container"
echo "  ‚Ä¢ High queue length ‚Üí Check for worker overload or stuck tasks"
echo "  ‚Ä¢ Redis connection issues ‚Üí Check redis container status"
echo ""
echo "üéØ Match Thread Specific:"
echo "  ‚Ä¢ Threads post 48h before match ‚Üí Check if it's too early"
echo "  ‚Ä¢ Need ESPN match ID ‚Üí Check database or admin panel"
echo "  ‚Ä¢ Force creation ‚Üí Use --force-match-thread option"
echo "  ‚Ä¢ Check Discord bot ‚Üí Ensure discord-bot container is running"
echo ""

echo "========================================"
echo "END OF COMMAND REFERENCE"
echo "========================================"
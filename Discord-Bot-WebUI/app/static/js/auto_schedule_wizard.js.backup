/**
 * Auto Schedule Wizard JavaScript
 * 
 * This file contains all the JavaScript functionality for the auto-schedule wizard,
 * including season creation, structure configuration, calendar management, and team setup.
 */

// Global wizard state
let currentStep = 1;
const maxSteps = 6;

// Global state for calendar
let calendarState = {
    weeks: [],
    startDate: null,
    regularWeeks: 7,
    includeTST: false,
    includeFUN: false,
    byeWeeks: 0
};

// Calendar drag and drop state
let calendarDraggedElement = null;
let draggedIndex = null;

/**
 * Initialize the season wizard modal
 */
function startSeasonWizard() {
    // MEMORY LEAK FIX: Clean up previous state before starting new wizard
    cleanupCalendarState();
    
    document.getElementById('seasonWizardModal').style.display = 'block';
    const modal = new bootstrap.Modal(document.getElementById('seasonWizardModal'));
    modal.show();
    
    // Set default start date to next Sunday (you can change this to any day)
    const today = new Date();
    const nextSunday = new Date(today);
    nextSunday.setDate(today.getDate() + (7 - today.getDay()) % 7);
    document.getElementById('seasonStartDate').value = nextSunday.toISOString().split('T')[0];
    
    updateCalendarPreview();
}

/**
 * Clean up calendar state and event listeners to prevent memory leaks
 */
function cleanupCalendarState() {
    // Clear calendar state
    calendarState.weeks = [];
    calendarState.startDate = null;
    
    // Remove all existing event listeners from calendar items
    document.querySelectorAll('.week-item').forEach(item => {
        // Clone the element to remove all event listeners
        const newItem = item.cloneNode(true);
        if (item.parentNode) {
            item.parentNode.replaceChild(newItem, item);
        }
    });
    
    // Reset drag state
    calendarDraggedElement = null;
    draggedIndex = null;
    
}

/**
 * Show existing seasons section
 */
function showExistingSeasons() {
    document.getElementById('existingSeasons').classList.remove('d-none');
    document.querySelector('.row.mb-4:nth-child(2)').style.display = 'none';
}

/**
 * Show main view (hide existing seasons)
 */
function showMainView() {
    document.getElementById('existingSeasons').classList.add('d-none');
    document.querySelector('.row.mb-4:nth-child(2)').style.display = '';
}

/**
 * Set a season as active
 */
function setActiveSeason(seasonId, leagueType) {
    if (confirm(`Are you sure you want to set this season as the current ${leagueType} season?`)) {
        fetch(window.autoScheduleUrls.setActiveSeason, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': document.querySelector('meta[name=csrf-token]').getAttribute('content')
            },
            body: JSON.stringify({
                season_id: seasonId,
                league_type: leagueType
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Refresh the page to show updated season status
                location.reload();
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            alert('An error occurred while updating the active season');
        });
    }
}

/**
 * Navigate to next step in wizard
 */
function nextStep() {
    if (currentStep < maxSteps) {
        if (validateStep(currentStep)) {
            updateStepDisplay(currentStep + 1);
        }
    }
}

/**
 * Navigate to previous step in wizard
 */
function previousStep() {
    if (currentStep > 1) {
        updateStepDisplay(currentStep - 1);
    }
}

/**
 * Update the wizard step display
 */
function updateStepDisplay(step) {
    // Hide current step
    document.querySelector(`.wizard-step[data-step="${currentStep}"]`).classList.remove('active');
    document.querySelector(`.step[data-step="${currentStep}"]`).classList.remove('active');
    
    // Show new step
    currentStep = step;
    document.querySelector(`.wizard-step[data-step="${currentStep}"]`).classList.add('active');
    document.querySelector(`.step[data-step="${currentStep}"]`).classList.add('active');
    
    // Update previous steps as completed
    for (let i = 1; i < currentStep; i++) {
        document.querySelector(`.step[data-step="${i}"]`).classList.add('completed');
    }
    
    // Update buttons
    document.getElementById('prevBtn').style.display = currentStep === 1 ? 'none' : 'block';
    document.getElementById('nextBtn').style.display = currentStep === maxSteps ? 'none' : 'block';
    document.getElementById('createBtn').classList.toggle('d-none', currentStep !== maxSteps);
    
    if (currentStep === 2) {
        updateStructureSections();
    } else if (currentStep === 3) {
        updateCalendarSections();
        generateCalendarPreview(); // Don't force regeneration - preserve drag-and-drop changes
    } else if (currentStep === 5) {
        updateTeamSections();
    } else if (currentStep === 6) {
        generateSeasonSummary();
    }
}

/**
 * Validate current step
 */
function validateStep(step) {
    // Add validation logic for each step
    return true;
}

/**
 * Update season structure sections based on league type
 */
function updateStructureSections() {
    const leagueType = document.getElementById('leagueType').value;
    const pubLeagueStructure = document.getElementById('pubLeagueStructure');
    const ecsFcStructure = document.getElementById('ecsFcStructure');
    
    if (leagueType === 'Pub League') {
        pubLeagueStructure.classList.remove('d-none');
        ecsFcStructure.classList.add('d-none');
        updateTotalWeeks('premier');
        updateTotalWeeks('classic');
    } else if (leagueType === 'ECS FC') {
        pubLeagueStructure.classList.add('d-none');
        ecsFcStructure.classList.remove('d-none');
        updateTotalWeeks('ecsFc');
    }
}

/**
 * Update total weeks calculation for a division
 */
function updateTotalWeeks(divisionType) {
    // Get shared special weeks
    const sharedFunEl = document.getElementById('sharedHasFunWeek');
    const sharedTstEl = document.getElementById('sharedHasTstWeek');
    const sharedByeEl = document.getElementById('sharedHasByeWeek');
    const funWeeks = (sharedFunEl && sharedFunEl.checked) ? 1 : 0;
    const tstWeeks = (sharedTstEl && sharedTstEl.checked) ? 1 : 0;
    const byeWeeks = (sharedByeEl && sharedByeEl.checked) ? 1 : 0;
    
    if (divisionType === 'premier') {
        const regularEl = document.getElementById('premierRegularWeeks');
        const playoffEl = document.getElementById('premierPlayoffWeeks');
        const bonusWeekEl = document.getElementById('premierHasBonusWeek');
        const totalEl = document.getElementById('premierTotalWeeks');
        
        if (regularEl && playoffEl && bonusWeekEl && totalEl) {
            const regular = parseInt(regularEl.value) || 0;
            const playoff = parseInt(playoffEl.value) || 0;
            const bonus = bonusWeekEl.checked ? 1 : 0;
            const total = regular + playoff + funWeeks + tstWeeks + byeWeeks + bonus;
            totalEl.textContent = total;
        }
    } else if (divisionType === 'classic') {
        const regularEl = document.getElementById('classicRegularWeeks');
        const playoffEl = document.getElementById('classicPlayoffWeeks');
        const bonusWeekEl = document.getElementById('classicHasBonusWeek');
        const totalEl = document.getElementById('classicTotalWeeks');
        
        if (regularEl && playoffEl && bonusWeekEl && totalEl) {
            const regular = parseInt(regularEl.value) || 0;
            const playoff = parseInt(playoffEl.value) || 0;
            const bonus = bonusWeekEl.checked ? 1 : 0;
            const total = regular + playoff + funWeeks + tstWeeks + byeWeeks + bonus;
            totalEl.textContent = total;
        }
    } else if (divisionType === 'ecsFc') {
        const regularEl = document.getElementById('ecsFcRegularWeeks');
        const playoffEl = document.getElementById('ecsFcPlayoffWeeks');
        const totalEl = document.getElementById('ecsFcTotalWeeks');
        
        if (regularEl && playoffEl && totalEl) {
            const regular = parseInt(regularEl.value) || 0;
            const playoff = parseInt(playoffEl.value) || 0;
            const total = regular + playoff;
            totalEl.textContent = total;
        }
    }
}

/**
 * Toggle practice configuration display
 */
function togglePracticeConfig() {
    const practiceCheckbox = document.getElementById('classicHasPractice');
    const practiceConfig = document.querySelector('.classic-practice-config');
    
    if (practiceCheckbox.checked) {
        practiceConfig.style.display = 'block';
    } else {
        practiceConfig.style.display = 'none';
    }
}

/**
 * Update calendar sections based on league type
 */
function updateCalendarSections() {
    const leagueType = document.getElementById('leagueType').value;
    const pubLeagueCalendar = document.getElementById('pubLeagueCalendar');
    const ecsFcCalendar = document.getElementById('ecsFcCalendar');
    
    if (leagueType === 'Pub League') {
        pubLeagueCalendar.classList.remove('d-none');
        ecsFcCalendar.classList.add('d-none');
        updateCalendarSummary();
    } else if (leagueType === 'ECS FC') {
        pubLeagueCalendar.classList.add('d-none');
        ecsFcCalendar.classList.remove('d-none');
        updateCalendarSummary();
    }
}

/**
 * Update calendar summary display
 */
function updateCalendarSummary() {
    const leagueType = document.getElementById('leagueType').value;
    const summaryEl = document.getElementById('calendarSummary');
    
    if (leagueType === 'Pub League') {
        // Get structure values
        const premierRegular = document.getElementById('premierRegularWeeks')?.value || 7;
        const premierPlayoff = document.getElementById('premierPlayoffWeeks')?.value || 2;
        const classicRegular = document.getElementById('classicRegularWeeks')?.value || 8;
        const classicPlayoff = document.getElementById('classicPlayoffWeeks')?.value || 1;
        
        const hasFun = document.getElementById('sharedHasFunWeek')?.checked || false;
        const hasTst = document.getElementById('sharedHasTstWeek')?.checked || false;
        const hasBye = document.getElementById('sharedHasByeWeek')?.checked || false;
        const hasBonus = document.getElementById('premierHasBonusWeek')?.checked || false;
        
        let summary = `<strong>Premier:</strong> ${premierRegular} regular + ${premierPlayoff} playoff`;
        if (hasFun || hasTst || hasBye || hasBonus) {
            summary += ' + ';
            const specials = [];
            if (hasFun) specials.push('Fun');
            if (hasTst) specials.push('TST');
            if (hasBye) specials.push('BYE');
            if (hasBonus) specials.push('Bonus');
            summary += specials.join(', ');
        }
        
        summary += `<br><strong>Classic:</strong> ${classicRegular} regular + ${classicPlayoff} playoff`;
        if (hasFun || hasTst || hasBye) {
            summary += ' + ';
            const specials = [];
            if (hasFun) specials.push('Fun');
            if (hasTst) specials.push('TST');
            if (hasBye) specials.push('BYE');
            summary += specials.join(', ');
        }
        
        summaryEl.innerHTML = summary;
    } else if (leagueType === 'ECS FC') {
        const regular = document.getElementById('ecsFcRegularWeeks')?.value || 8;
        const playoff = document.getElementById('ecsFcPlayoffWeeks')?.value || 1;
        
        summaryEl.innerHTML = `<strong>ECS FC:</strong> ${regular} regular + ${playoff} playoff weeks`;
    }
}

/**
 * Generate calendar preview
 */
function generateCalendarPreview(forceRegenerate = false) {
    const leagueType = document.getElementById('leagueType').value;
    const startDateStr = document.getElementById('seasonStartDate').value;
    
    if (!startDateStr) {
        return;
    }
    
    // Parse date string properly to avoid timezone issues
    // When creating Date from "YYYY-MM-DD", add time to ensure local date
    const [year, month, day] = startDateStr.split('-').map(num => parseInt(num));
    const startDate = new Date(year, month - 1, day); // month is 0-indexed
    
    // Always regenerate calendar when called - this ensures visibility
    calendarState.startDate = startDate;
    
    if (leagueType === 'Pub League') {
        generatePubLeagueCalendar(startDate);
    } else if (leagueType === 'ECS FC') {
        generateEcsFcCalendar(startDate);
    }
}

/**
 * Generate Pub League calendar with Premier and Classic divisions
 * FIXED: Properly handle shared special weeks (TST, FUN) between divisions
 */
function generatePubLeagueCalendar(startDate) {
    // Clear calendar state before generating new calendars
    calendarState.weeks = [];
    
    // Generate combined calendar with shared special weeks
    const combinedCalendar = generateCombinedPubLeagueCalendar(startDate);
    
    // Split the calendar HTML for display
    document.getElementById('premierCalendarPreview').innerHTML = combinedCalendar.premierHTML;
    document.getElementById('classicCalendarPreview').innerHTML = combinedCalendar.classicHTML;
    
    // Initialize drag and drop functionality
    initializeCalendarDragAndDrop();
}

/**
 * Regenerate calendar HTML from existing calendar state
 */
function regenerateCalendarHTML() {
    const leagueType = document.getElementById('leagueType').value;
    
    if (leagueType === 'Pub League') {
        // Group weeks by division
        const premierWeeks = calendarState.weeks.filter(w => w.division === 'premier');
        const classicWeeks = calendarState.weeks.filter(w => w.division === 'classic');
        
        document.getElementById('premierCalendarPreview').innerHTML = generateCalendarHTMLFromState(premierWeeks);
        document.getElementById('classicCalendarPreview').innerHTML = generateCalendarHTMLFromState(classicWeeks);
    } else if (leagueType === 'ECS FC') {
        const ecsFcWeeks = calendarState.weeks.filter(w => w.division === 'ecs_fc');
        document.getElementById('ecsFcCalendarPreview').innerHTML = generateCalendarHTMLFromState(ecsFcWeeks);
    }
    
    // Initialize drag and drop functionality
    initializeCalendarDragAndDrop();
}

/**
 * Generate calendar HTML from calendar state
 */
function generateCalendarHTMLFromState(weeks) {
    let calendar = '<div class="calendar-weeks">';
    
    weeks.forEach(week => {
        const weekTypeClass = week.type === 'PLAYOFF' ? 'playoff-week' : 
                             week.type === 'FUN' ? 'fun-week' : 
                             week.type === 'TST' ? 'tst-week' : 
                             week.type === 'BYE' ? 'bye-week' : 
                             week.type === 'BONUS' ? 'bonus-week' : 
                             'regular-week';
        
        const weekTypeText = week.type === 'PLAYOFF' ? 
                            (week.division === 'classic' ? 'Playoffs' : `Playoffs Round ${week.weekNumber - 7}`) :
                            week.type === 'FUN' ? 'Fun Week' :
                            week.type === 'TST' ? 'TST Week' :
                            week.type === 'BYE' ? 'BYE Week' :
                            week.type === 'BONUS' ? 'Bonus Week' :
                            'Regular' + (week.isPractice ? ' (Practice Game 1)' : '');
        
        calendar += `<div class="week-item ${weekTypeClass}" draggable="true" data-week="${week.weekNumber}" data-type="${week.type.toLowerCase()}">
            <div class="week-number">Week ${week.weekNumber}</div>
            <div class="week-date">${formatDate(week.date)}</div>
            <div class="week-type">${weekTypeText}</div>
        </div>`;
    });
    
    calendar += '</div>';
    return calendar;
}

/**
 * Helper function to create week HTML
 */
function createWeekHTML(weekNumber, date, type, isPractice = false, isShared = false) {
    const typeMap = {
        'Regular': 'regular-week',
        'FUN': 'fun-week', 
        'TST': 'tst-week',
        'BYE': 'bye-week',
        'PLAYOFF': 'playoff-week',
        'BONUS': 'bonus-week'
    };
    
    const textMap = {
        'Regular': `Regular${isPractice ? ' (Practice Game 1)' : ''}`,
        'FUN': `Fun Week${isShared ? ' (Shared)' : ''}`,
        'TST': `TST Week${isShared ? ' (Shared)' : ''}`,
        'BYE': `BYE Week${isShared ? ' (Shared)' : ''}`,
        'PLAYOFF': type === 'PLAYOFF' ? 'Playoffs' : type,
        'BONUS': 'Bonus Week'
    };
    
    const cssClass = typeMap[type] || 'regular-week';
    const sharedAttr = isShared ? ` shared-week" data-shared-type="${type.toLowerCase()}` : '';
    
    return `<div class="week-item ${cssClass}${sharedAttr}" draggable="true" data-week="${weekNumber}" data-type="${type.toLowerCase()}">
        <div class="week-number">Week ${weekNumber}</div>
        <div class="week-date">${formatDate(date)}</div>
        <div class="week-type">${textMap[type] || type}</div>
    </div>`;
}

/**
 * Generate combined Pub League calendar (simplified)
 */
function generateCombinedPubLeagueCalendar(startDate) {
    const config = {
        premier: { regular: parseInt(document.getElementById('premierRegularWeeks')?.value) || 7, playoff: parseInt(document.getElementById('premierPlayoffWeeks')?.value) || 2, bonus: document.getElementById('premierHasBonusWeek')?.checked },
        classic: { regular: parseInt(document.getElementById('classicRegularWeeks')?.value) || 8, playoff: parseInt(document.getElementById('classicPlayoffWeeks')?.value) || 1, bonus: document.getElementById('classicHasBonusWeek')?.checked },
        shared: { fun: document.getElementById('sharedHasFunWeek')?.checked, tst: document.getElementById('sharedHasTstWeek')?.checked, bye: document.getElementById('sharedHasByeWeek')?.checked }
    };
    
    let currentDate = new Date(startDate), weekNumber = 1;
    const calendar = { premierHTML: '<div class="calendar-weeks">', classicHTML: '<div class="calendar-weeks">' };
    
    // Regular weeks
    const maxRegular = Math.max(config.premier.regular, config.classic.regular);
    for (let i = 0; i < maxRegular; i++) {
        const weekDate = new Date(currentDate);
        
        ['premier', 'classic'].forEach(div => {
            if (i < config[div].regular) {
                const isPractice = div === 'classic' && (i === 0 || i === 2);
                calendarState.weeks.push({ weekNumber, date: new Date(weekDate), type: 'Regular', division: div, isPractice });
                calendar[`${div}HTML`] += createWeekHTML(weekNumber, weekDate, 'Regular', isPractice);
            }
        });
        
        currentDate.setDate(currentDate.getDate() + 7);
        weekNumber++;
    }
    
    // Shared special weeks
    ['fun', 'tst', 'bye'].forEach(type => {
        if (config.shared[type]) {
            const weekDate = new Date(currentDate);
            const upperType = type.toUpperCase();
            
            ['premier', 'classic'].forEach(div => {
                calendarState.weeks.push({ weekNumber, date: new Date(weekDate), type: upperType, division: div });
            });
            
            const weekHTML = createWeekHTML(weekNumber, weekDate, upperType, false, true);
            calendar.premierHTML += weekHTML;
            calendar.classicHTML += weekHTML;
            
            currentDate.setDate(currentDate.getDate() + 7);
            weekNumber++;
        }
    });
    
    // Playoff weeks
    const maxPlayoff = Math.max(config.premier.playoff, config.classic.playoff);
    for (let i = 0; i < maxPlayoff; i++) {
        const weekDate = new Date(currentDate);
        
        ['premier', 'classic'].forEach(div => {
            if (i < config[div].playoff) {
                calendarState.weeks.push({ weekNumber, date: new Date(weekDate), type: 'PLAYOFF', division: div });
                const playoffText = div === 'premier' ? `Playoffs Round ${i + 1}` : 'Playoffs';
                calendar[`${div}HTML`] += createWeekHTML(weekNumber, weekDate, playoffText);
            }
        });
        
        currentDate.setDate(currentDate.getDate() + 7);
        weekNumber++;
    }
    
    // Bonus weeks
    ['premier', 'classic'].forEach(div => {
        if (config[div].bonus) {
            const weekDate = new Date(currentDate);
            calendarState.weeks.push({ weekNumber, date: new Date(weekDate), type: 'BONUS', division: div });
            calendar[`${div}HTML`] += createWeekHTML(weekNumber, weekDate, 'BONUS');
            currentDate.setDate(currentDate.getDate() + 7);
            weekNumber++;
        }
    });
    
    calendar.premierHTML += '</div>';
    calendar.classicHTML += '</div>';
    return calendar;
}


/**
 * Initialize drag and drop functionality for calendar items
 */
function initializeCalendarDragAndDrop() {
    const weekItems = document.querySelectorAll('.week-item');
    
    weekItems.forEach(item => {
        // Add drag event listeners to all week items (including shared weeks)
        item.addEventListener('dragstart', handleCalendarDragStart);
        item.addEventListener('dragover', handleCalendarDragOver);
        item.addEventListener('dragenter', handleCalendarDragEnter);
        item.addEventListener('dragleave', handleCalendarDragLeave);
        item.addEventListener('drop', handleCalendarDrop);
        item.addEventListener('dragend', handleCalendarDragEnd);
    });
}

/**
 * Handle calendar drag start
 */
function handleCalendarDragStart(e) {
    calendarDraggedElement = e.target;
    e.target.style.opacity = '0.5';
    e.dataTransfer.effectAllowed = 'move';
}

/**
 * Handle calendar drag enter
 */
function handleCalendarDragEnter(e) {
    e.preventDefault();
}

/**
 * Handle calendar drag leave
 */
function handleCalendarDragLeave(e) {
    // Only clear indicators if we're leaving the week item entirely
    const weekItem = e.target.closest('.week-item');
    if (weekItem && !weekItem.contains(e.relatedTarget)) {
        clearDropIndicators();
    }
}

/**
 * Handle calendar drag over
 */
function handleCalendarDragOver(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    
    // Get the actual week item, not just the element being hovered
    const weekItem = e.target.closest('.week-item');
    if (weekItem && weekItem !== calendarDraggedElement) {
        // Clear any existing drop indicators
        clearDropIndicators();
        
        // Calculate drop position based on mouse position
        const rect = weekItem.getBoundingClientRect();
        const midPoint = rect.top + rect.height / 2;
        
        if (e.clientY < midPoint) {
            // Drop above
            weekItem.style.borderTop = '3px solid #007bff';
            weekItem.dataset.dropPosition = 'before';
        } else {
            // Drop below
            weekItem.style.borderBottom = '3px solid #007bff';
            weekItem.dataset.dropPosition = 'after';
        }
    }
}

/**
 * Handle calendar drop
 */
function handleCalendarDrop(e) {
    e.preventDefault();
    
    if (calendarDraggedElement) {
        const targetWeekItem = e.target.closest('.week-item');
        const draggedWeekItem = calendarDraggedElement.closest('.week-item');
        
        if (targetWeekItem && draggedWeekItem && targetWeekItem !== draggedWeekItem) {
            const container = targetWeekItem.closest('.calendar-container');
            const draggedContainer = draggedWeekItem.closest('.calendar-container');
            
            // Only allow reordering within the same division
            if (container === draggedContainer) {
                const dropPosition = targetWeekItem.dataset.dropPosition;
                const calendarWeeks = container.querySelector('.calendar-weeks');
                
                if (calendarWeeks) {
                    // Check if this is a shared week
                    const isSharedWeek = draggedWeekItem.classList.contains('shared-week');
                    const sharedType = draggedWeekItem.dataset.sharedType;
                    
                    if (dropPosition === 'before') {
                        calendarWeeks.insertBefore(draggedWeekItem, targetWeekItem);
                    } else if (dropPosition === 'after') {
                        calendarWeeks.insertBefore(draggedWeekItem, targetWeekItem.nextSibling);
                    }
                    
                    // If this is a shared week, synchronize the corresponding week in the other division
                    if (isSharedWeek && sharedType) {
                        synchronizeSharedWeek(draggedWeekItem, sharedType, dropPosition, targetWeekItem);
                    }
                    
                    // Update week numbers and recalculate dates after reordering
                    updateWeekNumbersAndDates(container);
                    
                    // If shared week was moved, update the other division too
                    if (isSharedWeek) {
                        const otherContainer = getOtherDivisionContainer(container);
                        if (otherContainer) {
                            updateWeekNumbersAndDates(otherContainer);
                        }
                    }
                    
                    // Save the current state after reordering
                }
            }
        }
    }
    
    // Clear all drop indicators
    clearDropIndicators();
}

/**
 * Handle calendar drag end
 */
function handleCalendarDragEnd(e) {
    e.target.style.opacity = '';
    calendarDraggedElement = null;
    clearDropIndicators();
}

/**
 * Clear all drop indicators
 */
function clearDropIndicators() {
    const allWeekItems = document.querySelectorAll('.week-item');
    allWeekItems.forEach(item => {
        item.style.borderTop = '';
        item.style.borderBottom = '';
        delete item.dataset.dropPosition;
    });
}

/**
 * Synchronize shared week movement to the other division
 */
function synchronizeSharedWeek(draggedWeekItem, sharedType, dropPosition, targetWeekItem) {
    const otherContainer = getOtherDivisionContainer(draggedWeekItem.closest('.calendar-container'));
    if (!otherContainer) return;
    
    // Find the corresponding shared week in the other division
    const otherSharedWeek = otherContainer.querySelector(`[data-shared-type="${sharedType}"]`);
    if (!otherSharedWeek) return;
    
    // Find the corresponding target week in the other division
    const targetWeekNumber = targetWeekItem.dataset.week;
    const otherTargetWeek = otherContainer.querySelector(`[data-week="${targetWeekNumber}"]`);
    if (!otherTargetWeek) return;
    
    const otherCalendarWeeks = otherContainer.querySelector('.calendar-weeks');
    if (!otherCalendarWeeks) return;
    
    // Move the shared week in the other division to the same relative position
    if (dropPosition === 'before') {
        otherCalendarWeeks.insertBefore(otherSharedWeek, otherTargetWeek);
    } else if (dropPosition === 'after') {
        otherCalendarWeeks.insertBefore(otherSharedWeek, otherTargetWeek.nextSibling);
    }
    
}

/**
 * Get the other division's container (Premier <-> Classic)
 */
function getOtherDivisionContainer(currentContainer) {
    const containerId = currentContainer.id;
    
    if (containerId.includes('premier')) {
        return document.getElementById('classicCalendarPreview');
    } else if (containerId.includes('classic')) {
        return document.getElementById('premierCalendarPreview');
    }
    
    return null;
}

/**
 * Update week numbers and dates after reordering
 */
function updateWeekNumbersAndDates(container) {
    const weekItems = container.querySelectorAll('.week-item');
    const startDateStr = document.getElementById('seasonStartDate').value;
    
    if (!startDateStr) return;
    
    
    // Parse date properly to avoid timezone issues
    const [year, month, day] = startDateStr.split('-').map(num => parseInt(num));
    const startDate = new Date(year, month - 1, day);
    let currentDate = new Date(startDate);
    
    // Determine which division this container belongs to
    const containerClass = container.className;
    const containerId = container.id;
    let division;
    
    
    if (containerClass.includes('premier') || containerId.includes('premier')) {
        division = 'premier';
    } else if (containerClass.includes('classic') || containerId.includes('classic')) {
        division = 'classic';
    } else if (containerClass.includes('ecs') || containerId.includes('ecs')) {
        division = 'ecs_fc';
    } else {
        // Fallback: check parent containers
        const parentContainer = container.closest('[id*="premier"], [id*="classic"], [id*="ecs"]');
        if (parentContainer) {
            if (parentContainer.id.includes('premier')) {
                division = 'premier';
            } else if (parentContainer.id.includes('classic')) {
                division = 'classic';
            } else if (parentContainer.id.includes('ecs')) {
                division = 'ecs_fc';
            }
        }
    }
    
    
    // MEMORY LEAK FIX: Remove old weeks for this division before adding new ones
    calendarState.weeks = calendarState.weeks.filter(w => w.division !== division);
    
    weekItems.forEach((item, index) => {
        // Update week number
        const weekNumber = item.querySelector('.week-number');
        weekNumber.textContent = `Week ${index + 1}`;
        item.dataset.week = index + 1;
        
        // Update date
        const weekDate = item.querySelector('.week-date');
        if (weekDate) {
            weekDate.textContent = formatDate(currentDate);
        }
        
        // Update calendarState.weeks array
        const weekType = item.dataset.type;
        const mappedType = weekType === 'regular' ? 'Regular' : 
                          weekType === 'fun' ? 'FUN' : 
                          weekType === 'tst' ? 'TST' : 
                          weekType === 'playoff' ? 'PLAYOFF' : 
                          weekType === 'bonus' ? 'BONUS' : 'Regular';
        
        // Check if this is a practice session
        const weekTypeText = item.querySelector('.week-type').textContent;
        const isPractice = weekTypeText.includes('Practice Game 1');
        
        // Add the updated week to calendar state
        calendarState.weeks.push({
            weekNumber: index + 1,
            date: new Date(currentDate),
            type: mappedType,
            division: division,
            isPractice: isPractice
        });
        
        // Move to next week (add 7 days for next Sunday)
        currentDate.setDate(currentDate.getDate() + 7);
    });
}

/**
 * Generate ECS FC calendar
 */
function generateEcsFcCalendar(startDate) {
    // Clear calendar state before generating new calendar
    calendarState.weeks = [];
    
    const regularWeeks = parseInt(document.getElementById('ecsFcRegularWeeks')?.value) || 8;
    const playoffWeeks = parseInt(document.getElementById('ecsFcPlayoffWeeks')?.value) || 1;
    
    let calendar = '<div class="calendar-weeks">';
    let currentDate = new Date(startDate);
    let weekNumber = 1;
    
    // Regular season weeks
    for (let i = 0; i < regularWeeks; i++) {
        // Add to calendar state
        calendarState.weeks.push({
            weekNumber: weekNumber,
            date: new Date(currentDate),
            type: 'Regular',
            division: 'ecs_fc'
        });
        
        calendar += `<div class="week-item regular-week">
            <div class="week-number">Week ${weekNumber}</div>
            <div class="week-date">${formatDate(currentDate)}</div>
            <div class="week-type">Regular</div>
        </div>`;
        
        currentDate.setDate(currentDate.getDate() + 7);
        weekNumber++;
    }
    
    // Playoff weeks
    for (let i = 0; i < playoffWeeks; i++) {
        // Add to calendar state
        calendarState.weeks.push({
            weekNumber: weekNumber,
            date: new Date(currentDate),
            type: 'PLAYOFF',
            division: 'ecs_fc'
        });
        
        calendar += `<div class="week-item playoff-week">
            <div class="week-number">Week ${weekNumber}</div>
            <div class="week-date">${formatDate(currentDate)}</div>
            <div class="week-type">Playoffs</div>
        </div>`;
        
        currentDate.setDate(currentDate.getDate() + 7);
        weekNumber++;
    }
    
    calendar += '</div>';
    document.getElementById('ecsFcCalendarPreview').innerHTML = calendar;
}

/**
 * Get next Sunday from a date
 */
function getNextSunday(date) {
    const result = new Date(date);
    const day = result.getDay();
    const diff = day === 0 ? 0 : 7 - day;
    result.setDate(result.getDate() + diff);
    return result;
}

/**
 * Format date for display
 */
function formatDate(date) {
    return date.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric',
        year: 'numeric'
    });
}

/**
 * Check if date is Sunday
 */
function isSunday(date) {
    return new Date(date).getDay() === 0;
}

/**
 * Update team sections based on league type
 */
function updateTeamSections() {
    const leagueType = document.getElementById('leagueType').value;
    const pubLeagueSection = document.getElementById('pubLeagueTeams');
    const ecsFcSection = document.getElementById('ecsFcTeams');
    
    if (leagueType === 'Pub League') {
        pubLeagueSection.classList.remove('d-none');
        ecsFcSection.classList.add('d-none');
        updateTeamPreview('premier');
        updateTeamPreview('classic');
    } else if (leagueType === 'ECS FC') {
        pubLeagueSection.classList.add('d-none');
        ecsFcSection.classList.remove('d-none');
        updateTeamPreview('ecsFc');
    }
}

/**
 * Update team preview display
 */
function updateTeamPreview(leagueType) {
    let count, previewId;
    
    if (leagueType === 'premier') {
        count = parseInt(document.getElementById('premierTeamCount').value);
        previewId = 'premierTeamPreview';
    } else if (leagueType === 'classic') {
        count = parseInt(document.getElementById('classicTeamCount').value);
        previewId = 'classicTeamPreview';
    } else if (leagueType === 'ecsFc') {
        count = parseInt(document.getElementById('ecsFcTeamCount').value);
        previewId = 'ecsFcTeamPreview';
    }
    
    const previewDiv = document.getElementById(previewId);
    const teamLabels = [];
    
    // Generate team names (Team A, Team B, etc.)
    for (let i = 0; i < count; i++) {
        const letter = String.fromCharCode(65 + i); // A, B, C, etc.
        teamLabels.push(`Team ${letter}`);
    }
    
    previewDiv.innerHTML = `
        <div class="small text-muted mb-2">Teams to be created:</div>
        <div class="d-flex flex-wrap gap-1">
            ${teamLabels.map(name => `<span class="badge bg-light text-dark border">${name}</span>`).join('')}
        </div>
    `;
}

/**
 * Initialize calendar from inputs
 */
function initializeCalendar() {
    const startDateInput = document.getElementById('seasonStartDate');
    const startDate = startDateInput.value;
    
    if (!startDate) return;
    
    // Parse date properly to avoid timezone issues
    const [year, month, day] = startDate.split('-').map(num => parseInt(num));
    const selectedDate = new Date(year, month - 1, day);
    const warningDiv = document.getElementById('startDateWarning');
    
    // Accept any day - no forcing to Sunday
    const dayName = selectedDate.toLocaleDateString('en-US', { weekday: 'long' });
    warningDiv.innerHTML = `
        <small class="text-success">
            <i class="ti ti-check me-1"></i>
            Season will start on ${dayName}, ${selectedDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
        </small>
    `;
    calendarState.startDate = selectedDate;
    
    // Get settings
    calendarState.regularWeeks = parseInt(document.getElementById('regularWeeks')?.value) || 7;
    calendarState.includeTST = document.getElementById('includeTST')?.checked || false;
    calendarState.includeFUN = document.getElementById('includeFUN')?.checked || false;
    calendarState.byeWeeks = parseInt(document.getElementById('byeWeekCount')?.value) || 0;
    
    // Build week array
    rebuildWeekArray();
    
    // Update UI
    updateCalendarPreview();
    updateTotalWeeks();
}

/**
 * Rebuild the week array based on current settings
 */
function rebuildWeekArray() {
    calendarState.weeks = [];
    let currentDate = new Date(calendarState.startDate);
    let weekNum = 1;
    
    // Add regular weeks
    for (let i = 0; i < calendarState.regularWeeks; i++) {
        calendarState.weeks.push({
            weekNumber: weekNum++,
            date: new Date(currentDate),
            type: 'Regular',
            isSpecial: false
        });
        currentDate.setDate(currentDate.getDate() + 7);
    }
    
    // Add special weeks at the end (will be dragged to position)
    if (calendarState.includeTST) {
        calendarState.weeks.push({
            weekNumber: weekNum++,
            date: new Date(currentDate),
            type: 'TST',
            isSpecial: true
        });
        currentDate.setDate(currentDate.getDate() + 7);
    }
    
    if (calendarState.includeFUN) {
        calendarState.weeks.push({
            weekNumber: weekNum++,
            date: new Date(currentDate),
            type: 'FUN',
            isSpecial: true
        });
        currentDate.setDate(currentDate.getDate() + 7);
    }
    
    // Add BYE weeks
    for (let i = 0; i < calendarState.byeWeeks; i++) {
        calendarState.weeks.push({
            weekNumber: weekNum++,
            date: new Date(currentDate),
            type: 'BYE',
            isSpecial: true
        });
        currentDate.setDate(currentDate.getDate() + 7);
    }
}

/**
 * Update calendar preview display
 */
function updateCalendarPreview() {
    const preview = document.getElementById('calendarPreview');
    if (!preview) return;
    
    let html = '<div class="row" id="calendarWeeks">';
    
    calendarState.weeks.forEach((week, index) => {
        let badgeClass = 'bg-primary';
        if (week.type === 'TST') badgeClass = 'bg-info';
        else if (week.type === 'FUN') badgeClass = 'bg-warning';
        else if (week.type === 'BYE') badgeClass = 'bg-secondary';
        
        html += `
            <div class="col-md-3 mb-2 week-item" data-index="${index}">
                <div class="text-center">
                    <div class="badge ${badgeClass} w-100 p-3 week-badge" draggable="true" data-week-type="${week.type}">
                        <div class="week-number">Week ${week.weekNumber}</div>
                        <div class="week-date">${week.date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</div>
                        <div class="week-type"><strong>${week.type}</strong></div>
                    </div>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    preview.innerHTML = html;
    
    // Add drag and drop functionality
    addDragAndDropToWeeks();
}

/**
 * Add drag and drop functionality to weeks
 */

/**
 * Generate season summary
 */
/**
 * Helper to create division summary card
 */
function createDivisionCard(name, data, color, icon) {
    return `<div class="col-md-6"><div class="card border-${color}"><div class="card-header bg-${color} text-white"><h6 class="mb-0"><i class="ti ti-${icon} me-2"></i>${name}</h6></div><div class="card-body"><ul class="list-unstyled mb-0">${Object.entries(data).map(([k,v]) => `<li><strong>${k}:</strong> ${v}</li>`).join('')}</ul></div></div></div>`;
}

function generateSeasonSummary() {
    const config = {
        name: document.getElementById('seasonName').value,
        type: document.getElementById('leagueType').value,
        startDate: document.getElementById('seasonStartDate').value,
        current: document.getElementById('setAsCurrent').checked,
        schedule: {
            'Premier Start': document.getElementById('premierStartTime')?.value || 'N/A',
            'Classic Start': document.getElementById('classicStartTime')?.value || 'N/A',
            'Match Duration': `${document.getElementById('matchDuration')?.value || 'N/A'} min`,
            'Fields': document.getElementById('fields')?.value || 'N/A'
        }
    };
    
    let summary = `<div class="alert alert-info"><h5><i class="ti ti-info-circle me-2"></i>Season Creation Summary</h5><p class="mb-0">Review configuration before creating season.</p></div><div class="row mb-4">${createDivisionCard('Season Details', {'Name': config.name, 'Type': config.type, 'Start Date': config.startDate, 'Set as Current': config.current ? 'Yes' : 'No'}, 'secondary', 'calendar')}${createDivisionCard('Schedule Configuration', config.schedule, 'secondary', 'settings')}</div>`;
    
    if (config.type === 'Pub League') {
        const premier = {regular: parseInt(document.getElementById('premierRegularWeeks')?.value) || 0, playoff: parseInt(document.getElementById('premierPlayoffWeeks')?.value) || 0, teams: parseInt(document.getElementById('premierTeamCount')?.value) || 0};
        const classic = {regular: parseInt(document.getElementById('classicRegularWeeks')?.value) || 0, playoff: parseInt(document.getElementById('classicPlayoffWeeks')?.value) || 0, teams: parseInt(document.getElementById('classicTeamCount')?.value) || 0};
        
        summary += `<div class="row mb-4">${createDivisionCard('Premier Division', {'Teams': premier.teams, 'Regular': `${premier.regular} weeks`, 'Playoffs': `${premier.playoff} weeks`}, 'primary', 'trophy')}${createDivisionCard('Classic Division', {'Teams': classic.teams, 'Regular': `${classic.regular} weeks`, 'Playoffs': `${classic.playoff} weeks`}, 'success', 'users')}</div>`;
    } else {
        const ecsfc = {regular: parseInt(document.getElementById('ecsFcRegularWeeks')?.value) || 0, playoff: parseInt(document.getElementById('ecsFcPlayoffWeeks')?.value) || 0, teams: parseInt(document.getElementById('ecsFcTeamCount')?.value) || 0};
        summary += `<div class="row mb-4"><div class="col-md-8 offset-md-2">${createDivisionCard('ECS FC Division', {'Teams': ecsfc.teams, 'Regular': `${ecsfc.regular} weeks`, 'Playoffs': `${ecsfc.playoff} weeks`}, 'info', 'shield').replace('col-md-6', 'col-12')}</div></div>`;
    }
    
    if (calendarState?.weeks?.length) summary += generateCombinedSchedulePreview();
    summary += `<div class="alert alert-success"><h6><i class="ti ti-check-circle me-2"></i>Ready to Create Season</h6><p class="mb-0">This will create your ${config.type} season. ${config.current ? 'Will be set as current active season.' : 'Created as draft season.'}</p></div>`;
    
    document.getElementById('seasonSummary').innerHTML = summary;
}

/**
 * Generate combined schedule preview for final step
 */
function generateCombinedSchedulePreview() {
    if (!calendarState || !calendarState.weeks || calendarState.weeks.length === 0) {
        return '';
    }
    
    // Group weeks by week number and date
    const weeksByNumber = {};
    calendarState.weeks.forEach(week => {
        if (!weeksByNumber[week.weekNumber]) {
            weeksByNumber[week.weekNumber] = {
                weekNumber: week.weekNumber,
                date: week.date,
                divisions: {}
            };
        }
        weeksByNumber[week.weekNumber].divisions[week.division] = {
            type: week.type,
            isPractice: week.isPractice
        };
    });
    
    // Convert to sorted array
    const combinedWeeks = Object.values(weeksByNumber).sort((a, b) => a.weekNumber - b.weekNumber);
    
    let preview = `
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="ti ti-calendar-event me-2"></i>Combined Schedule Preview</h6>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-sm table-hover">
                                <thead>
                                    <tr>
                                        <th width="10%">Week</th>
                                        <th width="15%">Date</th>
                                        <th width="35%">Premier Division</th>
                                        <th width="35%">Classic Division</th>
                                        <th width="5%">Status</th>
                                    </tr>
                                </thead>
                                <tbody>`;
    
    combinedWeeks.forEach(week => {
        const formattedDate = week.date.toLocaleDateString('en-US', { 
            month: 'short', 
            day: 'numeric' 
        });
        
        const premier = week.divisions.premier || { type: 'Regular', isPractice: false };
        const classic = week.divisions.classic || { type: 'Regular', isPractice: false };
        
        // Format division info
        const formatDivisionInfo = (divisionData) => {
            let typeText = '';
            let badgeClass = 'bg-secondary';
            
            switch (divisionData.type) {
                case 'Regular':
                    typeText = divisionData.isPractice ? 'Practice Session' : 'Regular Season';
                    badgeClass = divisionData.isPractice ? 'bg-success' : 'bg-secondary';
                    break;
                case 'FUN':
                    typeText = 'Fun Week';
                    badgeClass = 'bg-warning';
                    break;
                case 'TST':
                    typeText = 'TST Week';
                    badgeClass = 'bg-info';
                    break;
                case 'PLAYOFF':
                    typeText = 'Playoffs';
                    badgeClass = 'bg-danger';
                    break;
                case 'BONUS':
                    typeText = 'Bonus Week';
                    badgeClass = 'bg-success';
                    break;
                case 'BYE':
                    typeText = 'BYE Week';
                    badgeClass = 'bg-dark';
                    break;
                default:
                    typeText = divisionData.type;
                    badgeClass = 'bg-secondary';
            }
            
            return `<span class="badge ${badgeClass}">${typeText}</span>`;
        };
        
        // Determine if this is a special week
        const isSpecialWeek = premier.type !== 'Regular' || classic.type !== 'Regular' || 
                             premier.isPractice || classic.isPractice;
        
        const statusIcon = isSpecialWeek ? 
            '<i class="ti ti-star text-warning" title="Special Week"></i>' : 
            '<i class="ti ti-calendar text-muted" title="Regular Week"></i>';
        
        preview += `
            <tr ${isSpecialWeek ? 'class="table-warning"' : ''}>
                <td><strong>${week.weekNumber}</strong></td>
                <td>${formattedDate}</td>
                <td>${formatDivisionInfo(premier)}</td>
                <td>${formatDivisionInfo(classic)}</td>
                <td class="text-center">${statusIcon}</td>
            </tr>`;
    });
    
    preview += `
                                </tbody>
                            </table>
                        </div>
                        <div class="mt-3">
                            <small class="text-muted">
                                <i class="ti ti-info-circle me-1"></i>
                                This preview shows how both divisions will be scheduled together. 
                                Special weeks (Fun, TST, Playoffs) are highlighted in yellow.
                                ${combinedWeeks.some(w => w.divisions.classic?.isPractice) ? 
                                    ' Practice sessions are shown for Classic division where configured.' : ''}
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>`;
    
    return preview;
}

/**
 * Helper to get form data
 */
function getFormData() {
    const leagueType = document.getElementById('leagueType').value;
    const getId = id => document.getElementById(id);
    const getVal = id => getId(id)?.value;
    const getChecked = id => getId(id)?.checked;
    
    return {
        season_name: getVal('seasonName'),
        league_type: leagueType,
        set_as_current: getChecked('setAsCurrent'),
        season_start_date: calendarState.startDate.toISOString().split('T')[0],
        regular_weeks: calendarState.regularWeeks || 0,
        total_weeks: calendarState.weeks.length,
        week_configs: calendarState.weeks.map(w => ({date: w.date.toISOString().split('T')[0], type: w.type.toUpperCase(), week_number: w.weekNumber, division: w.division})),
        premier_start_time: getVal('premierStartTime'),
        classic_start_time: getVal('classicStartTime'),
        match_duration: getVal('matchDuration'),
        fields: getVal('fields'),
        ...(leagueType === 'Pub League' ? {
            premier_teams: parseInt(getVal('premierTeamCount')),
            classic_teams: parseInt(getVal('classicTeamCount')),
            has_fun_week: getChecked('sharedHasFunWeek'),
            has_tst_week: getChecked('sharedHasTstWeek'),
            premier_regular_weeks: parseInt(getVal('premierRegularWeeks')),
            premier_playoff_weeks: parseInt(getVal('premierPlayoffWeeks')),
            classic_regular_weeks: parseInt(getVal('classicRegularWeeks')),
            classic_playoff_weeks: parseInt(getVal('classicPlayoffWeeks'))
        } : {
            ecs_fc_teams: parseInt(getVal('ecsFcTeamCount')),
            ecs_fc_regular_weeks: parseInt(getVal('ecsFcRegularWeeks')),
            ecs_fc_playoff_weeks: parseInt(getVal('ecsFcPlayoffWeeks'))
        })
    };
}

function createSeason() {
    if (!calendarState?.weeks?.length) {
        alert('Please ensure the calendar is generated.');
        return;
    }
    
    const createButton = document.querySelector('[onclick="createSeason()"]');
    if (createButton) {
        createButton.disabled = true;
        createButton.innerHTML = '<i class="ti ti-loader-2 me-2 spin"></i>Creating Season...';
    }
    
    showLoadingModal('Creating Season', 'Please wait...');
    
    fetch(window.autoScheduleUrls.createSeasonWizard, {
        method: 'POST',
        headers: {'Content-Type': 'application/json', 'X-CSRFToken': document.querySelector('meta[name=csrf-token]').getAttribute('content')},
        body: JSON.stringify(getFormData())
    })
    .then(response => response.json())
    .then(data => {
        hideLoadingModal();
        if (data.success) {
            showSuccessModal('Season Created!', 'Redirecting...', () => window.location.href = data.redirect_url);
        } else {
            if (createButton) {
                createButton.disabled = false;
                createButton.innerHTML = '<i class="ti ti-check me-2"></i>Create Season';
            }
            showErrorModal('Error', data.error || 'An error occurred.');
        }
    })
    .catch(() => {
        hideLoadingModal();
        if (createButton) {
            createButton.disabled = false;
            createButton.innerHTML = '<i class="ti ti-check me-2"></i>Create Season';
        }
        showErrorModal('Network Error', 'Failed to create season.');
    });
}

            if (currentStep === 3) generateCalendarPreview(true); // Force regeneration on config change
        });
    }
    
    if (premierPlayoffWeeks) {
        premierPlayoffWeeks.addEventListener('input', () => {
            updateTotalWeeks('premier');
            if (currentStep === 3) generateCalendarPreview(true); // Force regeneration on config change
        });
    }
    
    if (premierHasBonusWeek) {
        premierHasBonusWeek.addEventListener('change', () => {
            updateTotalWeeks('premier');
            if (currentStep === 3) generateCalendarPreview(true); // Force regeneration on config change
        });
    }
    
    // Classic Division
    const classicRegularWeeks = document.getElementById('classicRegularWeeks');
    const classicPlayoffWeeks = document.getElementById('classicPlayoffWeeks');
    const classicHasBonusWeek = document.getElementById('classicHasBonusWeek');
    const classicHasPractice = document.getElementById('classicHasPractice');
    
    if (classicRegularWeeks) {
        classicRegularWeeks.addEventListener('input', () => {
            updateTotalWeeks('classic');
            if (currentStep === 3) generateCalendarPreview(true); // Force regeneration on config change
        });
    }
    
    if (classicPlayoffWeeks) {
        classicPlayoffWeeks.addEventListener('input', () => {
            updateTotalWeeks('classic');
            if (currentStep === 3) generateCalendarPreview(true); // Force regeneration on config change
        });
    }
    
    if (classicHasBonusWeek) {
        classicHasBonusWeek.addEventListener('change', () => {
            updateTotalWeeks('classic');
            if (currentStep === 3) generateCalendarPreview();
        });
    }
    
    if (classicHasPractice) {
        classicHasPractice.addEventListener('change', togglePracticeConfig);
    }
    
    // ECS FC
    const ecsFcRegularWeeks = document.getElementById('ecsFcRegularWeeks');
    const ecsFcPlayoffWeeks = document.getElementById('ecsFcPlayoffWeeks');
    
    if (ecsFcRegularWeeks) {
        ecsFcRegularWeeks.addEventListener('input', () => {
            updateTotalWeeks('ecsFc');
            if (currentStep === 3) generateCalendarPreview(true); // Force regeneration on config change
        });
    }
    
    if (ecsFcPlayoffWeeks) {
        ecsFcPlayoffWeeks.addEventListener('input', () => {
            updateTotalWeeks('ecsFc');
            if (currentStep === 3) generateCalendarPreview(true); // Force regeneration on config change
        });
    }
    
    // Team count change listeners
    const premierTeamCount = document.getElementById('premierTeamCount');
    const classicTeamCount = document.getElementById('classicTeamCount');
    const ecsFcTeamCount = document.getElementById('ecsFcTeamCount');
    
    if (premierTeamCount) {
        premierTeamCount.addEventListener('change', () => updateTeamPreview('premier'));
    }
    
    if (classicTeamCount) {
        classicTeamCount.addEventListener('change', () => updateTeamPreview('classic'));
    }
    
    if (ecsFcTeamCount) {
        ecsFcTeamCount.addEventListener('change', () => updateTeamPreview('ecsFc'));
    }
});

/**
 * Add CSS for spinner animation
 */
function addSpinnerCSS() {
    const style = document.createElement('style');
    style.textContent = `
        .spin {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(style);
}

// Add spinner CSS when script loads
addSpinnerCSS();

/**
 * Generic modal utility
 */
function showModal(id, title, message, type = 'info', callback = null) {
    const config = {
        loading: { icon: '<div class="spinner-border text-primary mb-3"><span class="visually-hidden">Loading...</span></div>', color: '', backdrop: 'data-bs-backdrop="static"', footer: '', autoClose: false },
        success: { icon: '<i class="ti ti-check-circle me-2"></i>', color: 'text-success', backdrop: '', footer: '', autoClose: 2000 },
        error: { icon: '<i class="ti ti-alert-circle me-2"></i>', color: 'text-danger', backdrop: '', footer: '<div class="modal-footer border-0"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button></div>', autoClose: false }
    };
    
    const cfg = config[type] || config.info;
    const modalHtml = `<div class="modal fade" id="${id}" tabindex="-1" ${cfg.backdrop}><div class="modal-dialog modal-dialog-centered"><div class="modal-content"><div class="modal-header border-0"><h5 class="modal-title ${cfg.color}">${cfg.icon}${title}</h5>${type === 'error' ? '<button type="button" class="btn-close" data-bs-dismiss="modal"></button>' : ''}</div><div class="modal-body ${type === 'loading' ? 'text-center' : ''} py-4"><p class="mb-0">${message}</p></div>${cfg.footer}</div></div></div>`;
    
    document.getElementById(id)?.remove();
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    const modal = new bootstrap.Modal(document.getElementById(id));
    modal.show();
    
    if (cfg.autoClose) {
        setTimeout(() => {
            bootstrap.Modal.getInstance(document.getElementById(id))?.hide();
            if (callback) callback();
        }, cfg.autoClose);
    }
}

function showLoadingModal(title, message) { showModal('loadingModal', title, message, 'loading'); }
function hideLoadingModal() { document.getElementById('loadingModal')?.remove(); }
function showSuccessModal(title, message, callback) { showModal('successModal', title, message, 'success', callback); }
function showErrorModal(title, message) { showModal('errorModal', title, message, 'error'); }

// ========================================
// Enhanced Wizard Functions
// ========================================

/**
 * Apply quick setup templates for wizard configuration
 */
function applyWizardTemplate(templateType) {
    switch(templateType) {
        case 'standard':
            // Standard setup: Premier 8:20, Classic 1:10, Time rotation enabled
            document.getElementById('premierStartTime').value = '08:20';
            document.getElementById('classicStartTime').value = '13:10';
            document.getElementById('matchDuration').value = '70';
            document.getElementById('breakDuration').value = '10';
            document.getElementById('enableTimeRotation').checked = true;
            document.getElementById('enablePracticeWeeks').checked = false;
            document.getElementById('practice-weeks-selection').style.display = 'none';
            break;
            
        case 'classic-practice':
            // Classic practice setup: Include practice weeks 1 & 3
            document.getElementById('premierStartTime').value = '08:20';
            document.getElementById('classicStartTime').value = '13:10';
            document.getElementById('matchDuration').value = '70';
            document.getElementById('breakDuration').value = '10';
            document.getElementById('enableTimeRotation').checked = true;
            document.getElementById('enablePracticeWeeks').checked = true;
            document.getElementById('practice-weeks-selection').style.display = 'block';
            
            // Check weeks 1 and 3 for practice
            setTimeout(() => {
                updateWizardPracticeWeekOptions();
                const week1 = document.getElementById('wizard-practice-week-1');
                const week3 = document.getElementById('wizard-practice-week-3');
                if (week1) week1.checked = true;
                if (week3) week3.checked = true;
            }, 100);
            break;
            
        case 'custom':
            // Custom setup - just clear and let user configure
            document.getElementById('enablePracticeWeeks').checked = false;
            document.getElementById('practice-weeks-selection').style.display = 'none';
            break;
    }
    
    // Show success feedback
    const template = templateType.charAt(0).toUpperCase() + templateType.slice(1);
    showToast(`${template} template applied successfully!`, 'success');
}

/**
 * Add new field configuration in wizard
 */
function addWizardField() {
    const container = document.getElementById('wizard-field-configurations');
    const fieldCount = container.children.length;
    
    const fieldItem = document.createElement('div');
    fieldItem.className = 'wizard-field-item mb-3';
    
    fieldItem.innerHTML = `
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Field Name</label>
                <input type="text" class="form-control wizard-field-name" placeholder="Field ${fieldCount + 1}" required>
            </div>
            <div class="col-md-3">
                <label class="form-label">Capacity</label>
                <input type="number" class="form-control wizard-field-capacity" value="20" min="1" max="50">
            </div>
            <div class="col-md-3">
                <label class="form-label">Priority</label>
                <select class="form-select wizard-field-priority">
                    <option value="standard">Standard</option>
                    <option value="preferred">Preferred</option>
                    <option value="backup">Backup</option>
                </select>
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="button" class="btn btn-outline-danger" onclick="removeWizardField(this)">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    `;
    
    container.appendChild(fieldItem);
    updateWizardFieldRemoveButtons();
}

/**
 * Remove field configuration in wizard
 */
function removeWizardField(button) {
    const fieldItems = document.querySelectorAll('.wizard-field-item');
    if (fieldItems.length > 2) { // Keep at least 2 fields
        button.closest('.wizard-field-item').remove();
        updateWizardFieldRemoveButtons();
    }
}

/**
 * Update field remove button states
 */
function updateWizardFieldRemoveButtons() {
    const fieldItems = document.querySelectorAll('.wizard-field-item');
    const removeButtons = document.querySelectorAll('.wizard-field-item .btn-outline-danger');
    
    removeButtons.forEach(button => {
        button.disabled = fieldItems.length <= 2;
    });
}

/**
 * Update practice week options based on season length
 */
function updateWizardPracticeWeekOptions() {
    // Try to get season length from various sources
    let weekCount = 7; // default
    
    // Check if we're in structure configuration step
    const premierWeeks = document.getElementById('premierRegularWeeks');
    const classicWeeks = document.getElementById('classicRegularWeeks');
    const totalWeeks = document.getElementById('totalSeasonWeeks');
    
    if (premierWeeks && classicWeeks) {
        weekCount = Math.max(parseInt(premierWeeks.value) || 7, parseInt(classicWeeks.value) || 8);
    } else if (totalWeeks) {
        weekCount = Math.min(8, parseInt(totalWeeks.value || 11) - 3); // For classic practice weeks
    }
    
    // Handle both wizard and classic practice week containers
    const containers = [
        document.getElementById('wizard-practice-week-checkboxes'),
        document.getElementById('classicPracticeWeekCheckboxes')
    ];
    
    containers.forEach((container, index) => {
        if (!container) return;
        
        container.innerHTML = '';
        const isClassic = index === 1;
        
        for (let i = 1; i <= weekCount; i++) {
            const div = document.createElement('div');
            div.className = isClassic ? 'form-check form-check-inline' : 'form-check form-check-inline me-3 mb-2';
            const checked = isClassic && (i === 1 || i === 3) ? 'checked' : '';
            const prefix = isClassic ? 'practice' : 'wizard-practice';
            
            div.innerHTML = `
                <input class="form-check-input" type="checkbox" id="${prefix}-week-${i}" ${isClassic ? '' : 'name="wizard_practice_weeks"'} value="${i}" ${checked}>
                <label class="form-check-label" for="${prefix}-week-${i}">Week ${i}</label>
            `;
            container.appendChild(div);
        }
    });
}


/**
 * Get wizard field configuration data
 */
function getWizardFieldConfig() {
    const fieldItems = document.querySelectorAll('.wizard-field-item');
    const fieldConfig = [];
    
    fieldItems.forEach(item => {
        const name = item.querySelector('.wizard-field-name').value.trim();
        const capacity = parseInt(item.querySelector('.wizard-field-capacity').value) || 20;
        const priority = item.querySelector('.wizard-field-priority').value;
        
        if (name) {
            fieldConfig.push({
                name: name,
                capacity: capacity,
                priority: priority
            });
        }
    });
    
    return fieldConfig;
}

/**
 * Get wizard practice weeks configuration
 */
function getWizardPracticeWeeks() {
    const enablePractice = document.getElementById('enablePracticeWeeks');
    if (!enablePractice || !enablePractice.checked) {
        return null;
    }
    
    const checkboxes = document.querySelectorAll('input[name="wizard_practice_weeks"]:checked');
    const practiceWeeks = Array.from(checkboxes).map(cb => cb.value);
    
    return practiceWeeks.length > 0 ? practiceWeeks.join(',') : null;
}

/**
 * Enhanced validation for wizard step 4
 */
function validateWizardStep4() {
    const premierTime = document.getElementById('premierStartTime').value;
    const classicTime = document.getElementById('classicStartTime').value;
    const matchDuration = document.getElementById('matchDuration').value;
    const fieldConfig = getWizardFieldConfig();
    
    if (!premierTime || !classicTime) {
        showErrorModal('Configuration Error', 'Both Premier and Classic start times are required.');
        return false;
    }
    
    if (!matchDuration || matchDuration < 30 || matchDuration > 120) {
        showErrorModal('Configuration Error', 'Match duration must be between 30 and 120 minutes.');
        return false;
    }
    
    if (fieldConfig.length < 2) {
        showErrorModal('Configuration Error', 'At least 2 fields are required for back-to-back scheduling.');
        return false;
    }
    
    // Check for duplicate field names
    const fieldNames = fieldConfig.map(f => f.name.toLowerCase());
    const uniqueNames = [...new Set(fieldNames)];
    if (fieldNames.length !== uniqueNames.length) {
        showErrorModal('Configuration Error', 'Field names must be unique.');
        return false;
    }
    
    return true;
}

/**
 * Show toast notification
 */
function showToast(message, type = 'info') {
    // Simple toast implementation
    const toast = document.createElement('div');
    toast.className = `alert alert-${type} position-fixed`;
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    toast.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check' : 'info'}-circle me-2"></i>
        ${message}
        <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
    `;
    
    document.body.appendChild(toast);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
        if (toast.parentElement) {
            toast.remove();
        }
    }, 3000);
}

// ========================================
// Enhanced Season Structure Functions
// ========================================

/**
 * Update season structure breakdown based on total weeks
 */
function updateSeasonStructure() {
    const totalWeeks = parseInt(document.getElementById('totalSeasonWeeks').value);
    const breakdown = document.getElementById('seasonBreakdown');
    
    // Calculate structure based on total weeks
    const specialWeeksCount = getEnabledSpecialWeeksCount();
    const regularWeeks = totalWeeks - specialWeeksCount - 2; // -2 for playoffs
    
    const premierRegular = regularWeeks - 1; // Premier has 1 less regular week
    const classicRegular = regularWeeks;
    
    breakdown.innerHTML = `
        <div><strong>Premier:</strong> ${premierRegular} regular + 2 playoff weeks</div>
        <div><strong>Classic:</strong> ${classicRegular} regular + 1 playoff week</div>
        <div class="text-muted"><small>Plus ${specialWeeksCount} shared special weeks</small></div>
    `;
}

/**
 * Count enabled special weeks
 */
function getEnabledSpecialWeeksCount() {
    let count = 0;
    if (document.getElementById('includeTstWeek')?.checked) count++;
    if (document.getElementById('includeFunWeek')?.checked) count++;
    if (document.getElementById('includeByeWeek')?.checked) count++;
    return count;
}

/**
 * Toggle special week placement visibility
 */
function toggleSpecialWeekPlacement(weekType, isEnabled) {
    const placementDiv = document.getElementById(`${weekType}WeekPlacement`);
    if (placementDiv) {
        placementDiv.style.display = isEnabled ? 'block' : 'none';
    }
}


/**
 * Consolidated DOMContentLoaded event handler
 */
document.addEventListener('DOMContentLoaded', function() {
    // Initialize field remove button states
    updateWizardFieldRemoveButtons();
    
    // Initialize calendar when wizard is shown
    const seasonStartDate = document.getElementById('seasonStartDate');
    if (seasonStartDate) {
        seasonStartDate.addEventListener('change', function() {
            if (currentStep === 3) {
                generateCalendarPreview(true);
            }
        });
    }
    
    // League type change listener
    const leagueType = document.getElementById('leagueType');
    if (leagueType) {
        leagueType.addEventListener('change', function() {
            if (currentStep === 2) updateStructureSections();
            if (currentStep === 5) updateTeamSections();
        });
    }
    
    // Season structure change listeners
    const sharedHasFunWeek = document.getElementById('sharedHasFunWeek');
    const sharedHasTstWeek = document.getElementById('sharedHasTstWeek');
    const sharedHasByeWeek = document.getElementById('sharedHasByeWeek');
    
    [sharedHasFunWeek, sharedHasTstWeek, sharedHasByeWeek].forEach(element => {
        if (element) {
            element.addEventListener('change', () => {
                updateTotalWeeks('premier');
                updateTotalWeeks('classic');
                if (currentStep === 3) generateCalendarPreview(true);
            });
        }
    });
    
    // Handle practice weeks toggle
    const enablePracticeWeeks = document.getElementById('enablePracticeWeeks');
    if (enablePracticeWeeks) {
        enablePracticeWeeks.addEventListener('change', function() {
            const selectionDiv = document.getElementById('practice-weeks-selection');
            if (selectionDiv) {
                selectionDiv.style.display = this.checked ? 'block' : 'none';
                if (this.checked) updateWizardPracticeWeekOptions();
            }
        });
    }
    
    // Handle classic practice toggle
    const classicPractice = document.getElementById('classicHasPractice');
    if (classicPractice) {
        classicPractice.addEventListener('change', function() {
            const configDiv = document.getElementById('classicPracticeConfig');
            if (configDiv) {
                configDiv.style.display = this.checked ? 'block' : 'none';
            }
        });
    }
    
    // Update practice week options when season structure changes
    const premierWeeks = document.getElementById('premierRegularWeeks');
    const classicWeeks = document.getElementById('classicRegularWeeks');
    
    if (premierWeeks) premierWeeks.addEventListener('change', updateWizardPracticeWeekOptions);
    if (classicWeeks) classicWeeks.addEventListener('change', updateWizardPracticeWeekOptions);
    
    // Handle special week toggles
    ['includeTstWeek', 'includeFunWeek', 'includeByeWeek'].forEach(weekId => {
        const checkbox = document.getElementById(weekId);
        if (checkbox) {
            checkbox.addEventListener('change', function() {
                const weekType = weekId.replace('include', '').replace('Week', '').toLowerCase();
                toggleSpecialWeekPlacement(weekType, this.checked);
                updateSeasonStructure();
            });
        }
    });
    
    // Handle season length changes
    const totalWeeksSelect = document.getElementById('totalSeasonWeeks');
    if (totalWeeksSelect) {
        totalWeeksSelect.addEventListener('change', function() {
            updateSeasonStructure();
            updateClassicPracticeWeeks();
        });
    }
    
    // Initialize on load
    updateSeasonStructure();
    updateClassicPracticeWeeks();
    
    // Show special week placements for enabled weeks
    if (document.getElementById('includeTstWeek')?.checked) {
        toggleSpecialWeekPlacement('tst', true);
    }
    if (document.getElementById('includeFunWeek')?.checked) {
        toggleSpecialWeekPlacement('fun', true);
    }
    if (document.getElementById('includeByeWeek')?.checked) {
        toggleSpecialWeekPlacement('bye', true);
    }
});
name: Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd Discord-Bot-WebUI
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Set up test environment
      run: |
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db
        export REDIS_URL=redis://localhost:6379/15
        export TESTING=true
        export SECRET_KEY=test-secret-key
        export JWT_SECRET_KEY=test-jwt-secret

    - name: Run unit tests
      run: |
        cd Discord-Bot-WebUI
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/15
        TESTING: true
        SECRET_KEY: test-secret-key
        JWT_SECRET_KEY: test-jwt-secret

    - name: Run integration tests
      run: |
        cd Discord-Bot-WebUI
        pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/15
        TESTING: true
        SECRET_KEY: test-secret-key
        JWT_SECRET_KEY: test-jwt-secret

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Generate coverage report
      run: |
        cd Discord-Bot-WebUI
        coverage html
        coverage report --fail-under=70

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: Discord-Bot-WebUI/htmlcov/

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run Black
      run: |
        cd Discord-Bot-WebUI
        black --check --diff app/ tests/
      continue-on-error: true
    
    - name: Run isort
      run: |
        cd Discord-Bot-WebUI
        isort --check-only --diff app/ tests/
      continue-on-error: true
    
    - name: Run flake8
      run: |
        cd Discord-Bot-WebUI
        flake8 app/ tests/
      continue-on-error: true
    
    - name: Run mypy
      run: |
        cd Discord-Bot-WebUI
        mypy app/ --ignore-missing-imports
      continue-on-error: true  # Don't fail CI for type errors initially

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security check
      run: |
        cd Discord-Bot-WebUI
        bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run safety check
      run: |
        cd Discord-Bot-WebUI
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          Discord-Bot-WebUI/bandit-report.json
          Discord-Bot-WebUI/safety-report.json
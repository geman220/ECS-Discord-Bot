version: '3.9'

services:
  redis:
    image: redis:alpine
    hostname: redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - web

  celery-worker:
    build:
      context: ./Discord-Bot-WebUI
      dockerfile: Dockerfile.webui
    command: python celery_worker.py
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - SQLALCHEMY_POOL_SIZE=2
      - SQLALCHEMY_MAX_OVERFLOW=3
      - SQLALCHEMY_POOL_TIMEOUT=30
      - SQLALCHEMY_POOL_RECYCLE=300
      - SQLALCHEMY_ENGINE_OPTIONS_CONNECT_TIMEOUT=10
    volumes:
      - ./Discord-Bot-WebUI:/app
      - celery_data:/tmp/celery
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - web

  celery-live-reporting-worker:
    build:
      context: ./Discord-Bot-WebUI
      dockerfile: Dockerfile.webui
    command: python celery_live_reporting_worker.py
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - SQLALCHEMY_POOL_SIZE=2
      - SQLALCHEMY_MAX_OVERFLOW=3
      - SQLALCHEMY_POOL_TIMEOUT=30
      - SQLALCHEMY_POOL_RECYCLE=300
      - SQLALCHEMY_ENGINE_OPTIONS_CONNECT_TIMEOUT=10
    volumes:
      - ./Discord-Bot-WebUI:/app
      - celery_live_data:/tmp/celery_live
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - web
      
  celery-discord-worker:
    build:
      context: ./Discord-Bot-WebUI
      dockerfile: Dockerfile.webui
    command: python celery_discord_worker.py
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - SQLALCHEMY_POOL_SIZE=2
      - SQLALCHEMY_MAX_OVERFLOW=3
      - SQLALCHEMY_POOL_TIMEOUT=30
      - SQLALCHEMY_POOL_RECYCLE=300
      - SQLALCHEMY_ENGINE_OPTIONS_CONNECT_TIMEOUT=10
    volumes:
      - ./Discord-Bot-WebUI:/app
      - celery_live_data:/tmp/celery_live
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - web

  celery-beat:
    build:
      context: ./Discord-Bot-WebUI
      dockerfile: Dockerfile.webui
    command: python celery_beat.py
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - TZ=America/Los_Angeles
      - SQLALCHEMY_POOL_SIZE=1
      - SQLALCHEMY_MAX_OVERFLOW=1
      - SQLALCHEMY_POOL_TIMEOUT=30
      - SQLALCHEMY_POOL_RECYCLE=300
      - SQLALCHEMY_ENGINE_OPTIONS_CONNECT_TIMEOUT=10
    volumes:
      - ./Discord-Bot-WebUI:/app
      - celery_beat_data:/tmp/celerybeat
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - web

  webui:
    build:
      context: ./Discord-Bot-WebUI
      dockerfile: Dockerfile.webui
    command: >
      gunicorn
      --worker-class eventlet
      --workers 1
      --bind 0.0.0.0:5000
      --log-level debug
      --access-logfile -
      --error-logfile -
      --timeout 300
      --reload
      --worker-connections 1000
      --keep-alive 65
      --preload
      --name webui
      wsgi:application
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - EVENTLET_NO_GREENDNS=yes
      - PYTHONPATH=/app
      - FLASK_DEBUG=1
      - FLASK_ENV=development
      - REDIS_URL=redis://redis:6379/0
      - SQLALCHEMY_POOL_SIZE=5
      - SQLALCHEMY_MAX_OVERFLOW=5
      - SQLALCHEMY_POOL_TIMEOUT=30
      - SQLALCHEMY_POOL_RECYCLE=300
      - SQLALCHEMY_ENGINE_OPTIONS_CONNECT_TIMEOUT=10
    env_file:
      - .env
    volumes:
      - ./Discord-Bot-WebUI:/app
      - /var/run/docker.sock:/var/run/docker.sock
      - ./predictions.db:/app/predictions.db
      - ./Discord-Bot-WebUI/service-account-key.json:/app/service-account-key.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webui.rule=Host(`portal.ecsfc.com`)"
      - "traefik.http.routers.webui.entrypoints=web"
      - "traefik.http.routers.webui-secure.entrypoints=websecure"
      - "traefik.http.routers.webui-secure.rule=Host(`portal.ecsfc.com`)"
      - "traefik.http.routers.webui-secure.tls=true"
      - "traefik.http.routers.webui-secure.tls.certresolver=myresolver"
      - "traefik.http.middlewares.websocket.headers.customrequestheaders.Connection=upgrade"
      - "traefik.http.middlewares.websocket.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.routers.webui-secure.middlewares=websocket"
      - "traefik.http.middlewares.secure-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.webui-secure.middlewares=secure-headers"
    deploy:
      resources:
        limits:
          memory: 1G
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - web

  flower:
    image: mher/flower
    command: celery --broker=redis://redis:6379/0 flower --port=5555
    environment:
      - FLOWER_UNAUTHENTICATED_API=true
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=Host(`flower.ecsfc.com`)"
      - "traefik.http.routers.flower.entrypoints=web"
      - "traefik.http.routers.flower-secure.entrypoints=websecure"
      - "traefik.http.routers.flower-secure.rule=Host(`flower.ecsfc.com`)"
      - "traefik.http.routers.flower-secure.tls=true"
      - "traefik.http.routers.flower-secure.tls.certresolver=myresolver"
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - web

  discord-bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - SQLALCHEMY_POOL_SIZE=2
      - SQLALCHEMY_MAX_OVERFLOW=2
      - SQLALCHEMY_POOL_TIMEOUT=30
      - SQLALCHEMY_POOL_RECYCLE=300
      - SQLALCHEMY_ENGINE_OPTIONS_CONNECT_TIMEOUT=10
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
      webui:
        condition: service_healthy
    command: python ECS_Discord_Bot.py
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - web

networks:
  web:
    external: true

volumes:
  redis_data:
  celery_data:
  celery_live_data:
  celery_beat_data: